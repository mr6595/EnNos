package com.moutamid.antimalwareapp.activities.virustotal;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.Build;
import android.os.Environment;
import android.provider.Settings;
import android.util.Base64;
import android.util.Base64OutputStream;
import android.util.Log;
import android.widget.Toast;

import com.fxn.stash.Stash;
import com.github.angads25.filepicker.model.DialogConfigs;
import com.github.angads25.filepicker.model.DialogProperties;
import com.github.angads25.filepicker.view.FilePickerDialog;
import com.moutamid.antimalwareapp.R;
import com.moutamid.antimalwareapp.model.VirusTotalModel;
import com.moutamid.antimalwareapp.utils.Constants;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;

import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class VirusTotalController {
    private static final String TAG = "VirusTotalController";
    public VirusTotalActivity activity;
    public Context context;
    FilePickerDialog dialog;
    ProgressDialog progressDialog;
    String message = "null";

    public VirusTotalController(VirusTotalActivity activity) {
        this.activity = activity;
        this.context = activity;
        progressDialog = new ProgressDialog(activity);
        progressDialog.setCancelable(false);
        progressDialog.setMessage("Loading...");
    }


    public void showTaskDialog() {
        DialogProperties properties = new DialogProperties();
        properties.selection_mode = DialogConfigs.SINGLE_MODE;
        properties.selection_type = DialogConfigs.FILE_SELECT;
        properties.root = Environment.getExternalStorageDirectory();
        properties.error_dir = properties.root;
        properties.offset = properties.root;
        properties.extensions = new String[]{"apk"};

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R && !Environment.isExternalStorageManager()) {
            try {
                Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);
                intent.addCategory("android.intent.category.DEFAULT");
                intent.setData(Uri.parse(String.format("package:%s", context.getApplicationContext().getPackageName())));
                activity.startActivityForResult(intent, 2297);
            } catch (Exception e) {
                Intent intent = new Intent();
                intent.setAction(Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION);
                activity.startActivityForResult(intent, 2297);
            }
        }

        dialog = new FilePickerDialog(activity, properties);
        dialog.setTitle(activity.getString(R.string.select_a_file));
        dialog.setDialogSelectionListener(files -> {
            //files is the array of the paths of files selected by the Application User.
            if (files != null) {
                File selectedFile = new File(files[0]);
                if (selectedFile.exists() && selectedFile.isFile()) {
                    uploadFile(selectedFile);
                } else {
                    activity.runOnUiThread(() -> {
                        Toast.makeText(context, context.getString(R.string.file_does_not_exist), Toast.LENGTH_SHORT).show();
                    });
                }
            } else {
                Toast.makeText(context, context.getString(R.string.error_loading_file), Toast.LENGTH_SHORT).show();
            }
        });

        dialog.show();

    }

    public void uploadFile(File selectedFile) {
        progressDialog.show();
        new Thread(() -> {
            try {
                OkHttpClient client = new OkHttpClient();
                OkHttpClient.Builder builder = new OkHttpClient.Builder();
                builder.connectTimeout(30, TimeUnit.SECONDS);
                builder.readTimeout(30, TimeUnit.SECONDS);
                builder.writeTimeout(30, TimeUnit.SECONDS);
                client = builder.build();

                MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
                String encodedData = "apikey=c9561c8e6f7e62c6359351ec094b2887145a34a2812fa7c605c16c3624d0cf1d&file=data%3Aapplication%2Fapk%3Bname%3D" + URLEncoder.encode(selectedFile.getName(), "utf-8") +
                        "%3Bbase64%2C" +
                        URLEncoder.encode(convertToBase64(selectedFile), "utf-8");
                RequestBody body = RequestBody.create(mediaType, encodedData);
                Request request = new Request.Builder()
                        .url("https://www.virustotal.com/vtapi/v2/file/scan")
                        .post(body)
                        .addHeader("Accept", "text/plain")
                        .addHeader("Content-Type", "application/x-www-form-urlencoded")
                        .build();

                Response response = client.newCall(request).execute();
                String responseData = response.body().string();
                Log.d(TAG, "onClick: response1: " + responseData);

                JSONObject jsonObject = new JSONObject(responseData);

                String resource = jsonObject.getString("resource");

                Log.d(TAG, "onClick: ID: " + resource);

                VirusTotalModel model = new VirusTotalModel();

                model.name = selectedFile.getName();
                model.isCompleted = false;
                model.resource = resource;

                activity.tasksArrayList.add(model);

                Stash.put(Constants.SCAN_TASKS, activity.tasksArrayList);

                activity.initRecyclerView();

                showToast("Done");
                activity.runOnUiThread(() -> {
                    new AlertDialog.Builder(activity)
                            .setMessage("Scan request successfully queued, come back later for the report")
                            .show();
                });

            } catch (IOException e) {
                showToast(e.getMessage());
                Log.d(TAG, "onClick: ERROR: " + e.getMessage());
                Log.d(TAG, "onClick: ERROR: " + e.toString());
                e.printStackTrace();
            } catch (JSONException e) {
                showToast(e.getMessage());
                Log.d(TAG, "onClick: ERROR: " + e.getMessage());
                Log.d(TAG, "onClick: ERROR: " + e.toString());
                e.printStackTrace();
            }
        }).start();
    }

    public void checkTaskStatus(int position, VirusTotalModel model) {
        progressDialog.show();
        new Thread(() -> {
            try {
                OkHttpClient client2 = new OkHttpClient();
                OkHttpClient.Builder builder2 = new OkHttpClient.Builder();
                builder2.connectTimeout(30, TimeUnit.SECONDS);
                builder2.readTimeout(30, TimeUnit.SECONDS);
                builder2.writeTimeout(30, TimeUnit.SECONDS);
                client2 = builder2.build();

                Request request2 = new Request.Builder()
                        .url("https://www.virustotal.com/vtapi/v2/file/report?apikey=c9561c8e6f7e62c6359351ec094b2887145a34a2812fa7c605c16c3624d0cf1d&resource=" +
                                model.resource +
                                "&allinfo=false")
                        .get()
                        .build();

                Response response2 = client2.newCall(request2).execute();

                String responseData2 = response2.body().string();
                Log.d(TAG, "onClick: response2: " + responseData2);

                JSONObject responseObject = new JSONObject(responseData2);

                if (responseObject.getInt("response_code") == 1) {
                    message = "From total virus scans: " + responseObject.getInt("total")
                            + "\nPositives are: " + responseObject.getInt("positives");
                    model.isCompleted = true;
                    activity.tasksArrayList.get(position).isCompleted = true;
                    Stash.put(Constants.SCAN_TASKS, activity.tasksArrayList);
                    activity.initRecyclerView();
                } else {
                    message = responseObject.getString("verbose_msg");
                }

                activity.runOnUiThread(() -> {
                    progressDialog.dismiss();
                    new AlertDialog.Builder(activity).setTitle("Result").setMessage(message).show();
                });
            } catch (JSONException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }).start();
    }

    private void showToast(String response) {
        activity.runOnUiThread(() -> {
            progressDialog.dismiss();
            Toast.makeText(activity, response, Toast.LENGTH_SHORT).show();

        });
    }

    // Converting File to Base64.encode String type using Method
    public String convertToBase64(File f) {
        InputStream inputStream = null;
        String encodedFile = "", lastVal;
        try {
            inputStream = new FileInputStream(f.getAbsolutePath());

            byte[] buffer = new byte[10240];//specify the size to allow
            int bytesRead;
            ByteArrayOutputStream output = new ByteArrayOutputStream();
            Base64OutputStream output64 = new Base64OutputStream(output, Base64.DEFAULT);

            while ((bytesRead = inputStream.read(buffer)) != -1) {
                output64.write(buffer, 0, bytesRead);
            }
            output64.close();
            encodedFile = output.toString();
        } catch (FileNotFoundException e1) {
            e1.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        lastVal = encodedFile;
        return lastVal;
    }

}
